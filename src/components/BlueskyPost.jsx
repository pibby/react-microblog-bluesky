import React, { useState } from 'react';
import { RichText } from '@atproto/api';
import Lightbox from "yet-another-react-lightbox";
import "yet-another-react-lightbox/styles.css";

const BlueskyPost = ({ content }) => {
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [lightboxIndex, setLightboxIndex] = useState(0);

  // Destructure text, facets, and images with defaults
  const { text = '', facets = [], images = [] } = content || {};

  // --- Rich Text Processing ---
  const rt = text ? new RichText({ text, facets }) : null; // Create RichText instance only if text exists
  const renderedSegments = [];
  if (rt) {
    // Iterate through segments generated by RichText helper
    for (const segment of rt.segments()) {
      const key = `${segment.text}-${renderedSegments.length}`;

      if (segment.isLink()) {
        // Render links using the URI from the facet
        renderedSegments.push(
          <a
            key={key}
            href={segment.facet.uri} // Use the URI from the facet feature
            target="_blank"
            rel="noopener noreferrer"
            className="bluesky-link" // Add class for styling
          >
            {segment.text}
          </a>
        );
      } else if (segment.isMention()) {
        const did = segment.facet.did;
        renderedSegments.push(
          <a
            key={key}
            href={`https://bsky.app/profile/${did}`} // Link to bsky.app profile
            target="_blank"
            rel="noopener noreferrer"
            className="bluesky-mention"
          >
            {segment.text} {/* Display the @handle */}
          </a>
        );
      } else if (segment.isTag()) {
        // Render hashtags
        const tag = segment.facet.tag;
        renderedSegments.push(
          <a
            key={key}
            href={`https://bsky.app/search?q=%23${encodeURIComponent(tag)}`} // Link to bsky.app search
            target="_blank"
            rel="noopener noreferrer"
            className="bluesky-hashtag"
          >
            {segment.text} {/* Display the #tag */}
          </a>
        );
      } else {
        // Render plain text segments
        renderedSegments.push(<React.Fragment key={key}>{segment.text}</React.Fragment>);
      }
    }
  }

  // --- Lightbox Setup ---
  const slides = images.length > 0 ? images.map(img => ({ src: img.fullsize, alt: img.alt })) : [];
  const openLightbox = (index) => { setLightboxIndex(index); setLightboxOpen(true); };
  // --- End Lightbox Setup ---


  return (
    <article className="post-card bluesky-post">
      <div className="post-content">
        {/* Render the processed rich text segments */}
        {renderedSegments.length > 0 && (
            <p style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word' }}>
                {renderedSegments}
            </p>
        )}

        {/* Render image thumbnails */}
        {images.length > 0 && (
          <div className="bluesky-thumbnails-container">
            {images.map((image, index) => (
               image?.thumb ? (
                  <img
                    key={image.thumb || index}
                    src={image.thumb}
                    alt={image.alt || `Bluesky image thumbnail ${index + 1}`}
                    className="bluesky-thumbnail"
                    onClick={() => openLightbox(index)}
                    loading="lazy"
                    onError={(e) => { e.target.style.display = 'none'; console.warn(`Failed to load thumb: ${image.thumb}`)}}
                  />
               ) : null
             ))}
          </div>
        )}
      </div>

      {/* Render the Lightbox */}
      {slides.length > 0 && (
          <Lightbox
            open={lightboxOpen}
            close={() => setLightboxOpen(false)}
            index={lightboxIndex}
            slides={slides}
          />
      )}
    </article>
  );
};

export default BlueskyPost;